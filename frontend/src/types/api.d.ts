/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/dj-rest-auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check the credentials and return the REST Token
         *     if the credentials are valid and authenticated.
         *     Calls Django Auth login method to register User ID
         *     in Django session framework
         *
         *     Accept the following POST parameters: username, password
         *     Return the REST Framework Token Object's key. */
        post: operations["dj_rest_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django logout method and delete the Token object
         *     assigned to the current User object.
         *
         *     Accepts/Returns nothing. */
        post: operations["dj_rest_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/password/change/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth SetPasswordForm save method.
         *
         *     Accepts the following POST parameters: new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["dj_rest_auth_password_change_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/password/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth PasswordResetForm save method.
         *
         *     Accepts the following POST parameters: email
         *     Returns the success/fail message. */
        post: operations["dj_rest_auth_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/password/reset/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Password reset e-mail link is confirmed, therefore
         *     this resets the user's password.
         *
         *     Accepts the following POST parameters: token, uid,
         *         new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["dj_rest_auth_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/registration/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Registers a new user.
         *
         *     Accepts the following POST parameters: username, email, password1, password2. */
        post: operations["dj_rest_auth_registration_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/registration/resend-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Resends another email to an unverified email.
         *
         *     Accepts the following POST parameter: email. */
        post: operations["dj_rest_auth_registration_resend_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/registration/verify-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verifies the email associated with the provided key.
         *
         *     Accepts the following POST parameter: key. */
        post: operations["dj_rest_auth_registration_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dj-rest-auth/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        get: operations["dj_rest_auth_user_retrieve"];
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        put: operations["dj_rest_auth_user_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        patch: operations["dj_rest_auth_user_partial_update"];
        trace?: never;
    };
    "/api/v1/todos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["todos_list"];
        put?: never;
        post: operations["todos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/todos/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["todos_retrieve"];
        put: operations["todos_update"];
        post?: never;
        delete: operations["todos_destroy"];
        options?: never;
        head?: never;
        patch: operations["todos_partial_update"];
        trace?: never;
    };
    "/api/v1/todos/{id}/complete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["todos_complete_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["todos_complete_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Login: {
            username?: string;
            /** Format: email */
            email?: string;
            password: string;
        };
        PasswordChange: {
            new_password1: string;
            new_password2: string;
        };
        /** @description Serializer for requesting a password reset e-mail. */
        PasswordReset: {
            /** Format: email */
            email: string;
        };
        /** @description Serializer for confirming a password reset attempt. */
        PasswordResetConfirm: {
            new_password1: string;
            new_password2: string;
            uid: string;
            token: string;
        };
        PatchedTodo: {
            readonly id?: number;
            title?: string;
            memo?: string;
            /** Format: date-time */
            readonly created?: string;
            readonly completed?: boolean;
        };
        PatchedTodoToggleComplete: {
            readonly id?: number;
        };
        /** @description User model w/o password */
        PatchedUserDetails: {
            /** ID */
            readonly pk?: number;
            /**
             * ユーザー名
             * @description この項目は必須です。半角アルファベット、半角数字、@/./+/-/_ で150文字以下にしてください。
             */
            username?: string;
            /**
             * メールアドレス
             * Format: email
             */
            readonly email?: string;
            /** 名 */
            first_name?: string;
            /** 姓 */
            last_name?: string;
        };
        Register: {
            username: string;
            /** Format: email */
            email?: string;
            password1: string;
            password2: string;
        };
        ResendEmailVerification: {
            /** Format: email */
            email?: string;
        };
        RestAuthDetail: {
            readonly detail: string;
        };
        Todo: {
            readonly id: number;
            title: string;
            memo?: string;
            /** Format: date-time */
            readonly created: string;
            readonly completed: boolean;
        };
        TodoToggleComplete: {
            readonly id: number;
        };
        /** @description Serializer for Token model. */
        Token: {
            /** キー */
            key: string;
        };
        /** @description User model w/o password */
        UserDetails: {
            /** ID */
            readonly pk: number;
            /**
             * ユーザー名
             * @description この項目は必須です。半角アルファベット、半角数字、@/./+/-/_ で150文字以下にしてください。
             */
            username: string;
            /**
             * メールアドレス
             * Format: email
             */
            readonly email: string;
            /** 名 */
            first_name?: string;
            /** 姓 */
            last_name?: string;
        };
        VerifyEmail: {
            key: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    dj_rest_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
                "application/x-www-form-urlencoded": components["schemas"]["Login"];
                "multipart/form-data": components["schemas"]["Login"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
        };
    };
    dj_rest_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    dj_rest_auth_password_change_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChange"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
                "multipart/form-data": components["schemas"]["PasswordChange"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    dj_rest_auth_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordReset"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
                "multipart/form-data": components["schemas"]["PasswordReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    dj_rest_auth_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirm"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
                "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    dj_rest_auth_registration_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Register"];
                "application/x-www-form-urlencoded": components["schemas"]["Register"];
                "multipart/form-data": components["schemas"]["Register"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
        };
    };
    dj_rest_auth_registration_resend_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResendEmailVerification"];
                "application/x-www-form-urlencoded": components["schemas"]["ResendEmailVerification"];
                "multipart/form-data": components["schemas"]["ResendEmailVerification"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    dj_rest_auth_registration_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmail"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyEmail"];
                "multipart/form-data": components["schemas"]["VerifyEmail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    dj_rest_auth_user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
        };
    };
    dj_rest_auth_user_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDetails"];
                "application/x-www-form-urlencoded": components["schemas"]["UserDetails"];
                "multipart/form-data": components["schemas"]["UserDetails"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
        };
    };
    dj_rest_auth_user_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserDetails"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserDetails"];
                "multipart/form-data": components["schemas"]["PatchedUserDetails"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
        };
    };
    todos_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"][];
                };
            };
        };
    };
    todos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Todo"];
                "application/x-www-form-urlencoded": components["schemas"]["Todo"];
                "multipart/form-data": components["schemas"]["Todo"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
        };
    };
    todos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
        };
    };
    todos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Todo"];
                "application/x-www-form-urlencoded": components["schemas"]["Todo"];
                "multipart/form-data": components["schemas"]["Todo"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
        };
    };
    todos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    todos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTodo"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTodo"];
                "multipart/form-data": components["schemas"]["PatchedTodo"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
        };
    };
    todos_complete_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TodoToggleComplete"];
                "application/x-www-form-urlencoded": components["schemas"]["TodoToggleComplete"];
                "multipart/form-data": components["schemas"]["TodoToggleComplete"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoToggleComplete"];
                };
            };
        };
    };
    todos_complete_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTodoToggleComplete"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTodoToggleComplete"];
                "multipart/form-data": components["schemas"]["PatchedTodoToggleComplete"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TodoToggleComplete"];
                };
            };
        };
    };
}
